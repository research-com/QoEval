[QOEMU]

# Network device configuration
# name of network interface connecting us to the Internet
NetDeviceName = enp0s31f6

# Mobile Device/Emulator configuration
## EmulatorType = GENYMOTION
EmulatorType = REAL_DEVICE
## for real device: Mirror the device screen while recording
ShowDeviceScreenMirror = True
## for Emulator: show device frame
ShowDeviceFrame = False


# ADB Device Serial Number - determine your device/emulator serial by using the command "adb devices"
# 11131FDD4003EW: serial number of a Pixel 5 real hardware device
AdbDeviceSerial = 11131FDD4003EW
# Emulator-IP Address and Port:
# AdbDeviceSerial = 192.168.56.146:5555

# Audio Device Configuration:
# AUDIO_DEVICE config: use "pacmd list-sources" to get a list of sources
# audio device to be used if software-emulated device (genimotion or sdk emulator) is active:
# AudioDeviceEmu = "alsa_output.pci-0000_00_1f.3.analog-stereo.monitor"
# audio device to be used if a real hardware device is connected
AudioDeviceReal = "hw:0"

# Paths
## Stimuli parameter file (CSV format)
ParameterFile = ./stimuli-params/full.csv

## Path to dynamic parameter files
DynamicParameterPath = ./stimuli-params/variable_throughput

## Path to trigger images for detecting start/end of relevant stimuli section
TriggerImagePath = ./stimuli-params/trigger

## Path where captured video files are stored (default: "~/stimuli")
VideoCapturePath = ~/stimuli

## Path where Android virtual devices (avd) files are stored (default: "~/qoemu_avd")
AVDPath = ~/qoemu_avd


# Reporting and Analysis Options:
TrafficAnalysisLiveVisualization = False
TrafficAnalysisPlot = True
TrafficAnalysisPlotSettings = ["{'directions': ['in'], 'protocols': ['all'], 'kind': ['bar']}", "{'directions': ['out'], 'protocols': ['all'], 'kind': ['bar']}", "{'directions': ['in'], 'protocols': ['all'], 'kind': ['hist']}", "{'directions': ['out'], 'protocols': ['all'], 'kind': ['hist']}"]
TrafficAnalysisBinSizes = [0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]

# Perform additional check to detect invalid network emulation situations
NetEmSanityCheck = False

# Parameters for detecting the start of video playback:
# size [B] of differential frame that triggers start of video (normal relevance)
VidStartDetectThrSizeNormalRelevance = 10000
# size [B] of differential frame that triggers start of video (high relevance, strong indicator)
VidStartDetectThrSizeHighRelevance = 80000
# number of frames needed above the threshold to avoid false positives
VidStartDetectThrNrFrames = 7

# post-processing: target audio volume (max. volume, in dB)
AudioTargetVolume = -2.0

# post-processing: erase audio (e.g. to avoid static noise while rebuffering occurs),
#                  specified as list of start-stop-times corresponding to times in unprocessed/P0 video
# Example: in order to erase audio between in the intervals [0,35] and [39,59] use:
# AudioEraseStartStop = 0,35,39,59

# post-processing: erase box on video (e.g. broadcaster logo), specified as top-left position (x,y) and width, height
# VidEraseBox = 2180, 930, 130, 130

# post-processing: no auto-detection of end of buffering phase, manually specifying the end of the buffering phase
#                  (required, e.g., for youtube-stimuli with fixed codec since in this case the video is already active
#                   when the preparation phase ends and auto-detection does not work reliably)
# VidInitBufferTimeManual = 7.2

[NETEM]
# Network emulation parameters (usually read from csv-file)